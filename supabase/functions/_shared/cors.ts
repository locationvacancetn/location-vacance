/**
 * üîí CONFIGURATION CORS S√âCURIS√âE
 * 
 * Restreint l'acc√®s aux Edge Functions uniquement aux domaines autoris√©s.
 * Bloque toutes les requ√™tes provenant de domaines non autoris√©s.
 * 
 * SEC-006: Correction du CORS ouvert √† tous (*)
 */

// Domaines autoris√©s pour acc√©der aux Edge Functions
const ALLOWED_ORIGINS = [
  'https://location-vacance.tn',           // Production
  'https://www.location-vacance.tn',       // Production (www)
  // Les domaines localhost sont g√©r√©s par regex ci-dessous
];

/**
 * V√©rifie si une origine est autoris√©e
 */
function isOriginAllowed(origin: string | null): boolean {
  if (!origin) return false;
  
  // V√©rifier les domaines explicitement autoris√©s
  if (ALLOWED_ORIGINS.includes(origin)) {
    return true;
  }
  
  // Autoriser localhost avec n'importe quel port (d√©veloppement uniquement)
  // Regex: http://localhost:PORT ou http://127.0.0.1:PORT
  const localhostPattern = /^http:\/\/(localhost|127\.0\.0\.1)(:\d+)?$/;
  if (localhostPattern.test(origin)) {
    return true;
  }
  
  return false;
}

/**
 * G√©n√®re les headers CORS appropri√©s en fonction de l'origine
 * 
 * @param origin - L'origine de la requ√™te (depuis req.headers.get('origin'))
 * @returns Headers CORS s√©curis√©s
 */
export function getCorsHeaders(origin: string | null): Record<string, string> {
  // V√©rifier si l'origine est autoris√©e
  const allowedOrigin = isOriginAllowed(origin) 
    ? origin 
    : ALLOWED_ORIGINS[0]; // Fallback vers production
  
  return {
    'Access-Control-Allow-Origin': allowedOrigin || ALLOWED_ORIGINS[0],
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',
    'Access-Control-Allow-Credentials': 'true',
  };
}

/**
 * Headers CORS pour requ√™tes OPTIONS (preflight)
 * Utilise l'origine de la requ√™te si elle est autoris√©e
 */
export function getPreflightHeaders(origin: string | null): Record<string, string> {
  return {
    ...getCorsHeaders(origin),
    'Access-Control-Max-Age': '86400', // Cache preflight pendant 24h
  };
}

/**
 * V√©rifie si la requ√™te provient d'un domaine autoris√©
 * Retourne une erreur 403 si le domaine n'est pas autoris√©
 */
export function validateOrigin(origin: string | null): Response | null {
  if (!origin) {
    // Pas d'origine = requ√™te directe (curl, postman, etc.)
    // On peut choisir de l'accepter ou de la bloquer
    // Pour plus de s√©curit√©, on pourrait retourner une erreur ici
    return null;
  }
  
  if (!isOriginAllowed(origin)) {
    return new Response(
      JSON.stringify({ 
        error: 'Origine non autoris√©e',
        message: 'Cette origine n\'est pas autoris√©e √† acc√©der √† cette ressource.'
      }),
      { 
        status: 403,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': origin, // N√©cessaire pour que le navigateur lise l'erreur
        }
      }
    );
  }
  
  return null;
}

/**
 * Liste des origines autoris√©es (pour logs ou debug)
 */
export function getAllowedOrigins(): string[] {
  return [
    ...ALLOWED_ORIGINS,
    'http://localhost:* (tous les ports)',
    'http://127.0.0.1:* (tous les ports)'
  ];
}

