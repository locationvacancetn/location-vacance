import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from 'jsr:@supabase/supabase-js@2';
import { getCorsHeaders, getPreflightHeaders } from '../_shared/cors.ts';

// Interface pour les donn√©es de cr√©ation d'utilisateur
// Correspond EXACTEMENT aux champs de votre table profiles
interface CreateUserRequest {
  email: string;
  password: string;
  full_name: string;
  role: 'admin' | 'owner' | 'advertiser' | 'tenant';
  phone?: string;
  bio?: string;
  whatsapp_number?: string;
  website_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  tiktok_url?: string;
  messenger_url?: string;
  company_name?: string;
  company_website?: string;
  business_phone?: string;
  business_email?: string;
  linkedin_url?: string;
  twitter_url?: string;
}

// Interface pour la r√©ponse
interface CreateUserResponse {
  success: boolean;
  user?: any;
  error?: string;
}

Deno.serve(async (req: Request) => {
  // üîí SEC-006: R√©cup√©rer l'origine de la requ√™te
  const origin = req.headers.get('origin');
  
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: getPreflightHeaders(origin) });
  }
  
  // V√©rifier que la m√©thode est POST
  if (req.method !== 'POST') {
    return new Response(
      JSON.stringify({ success: false, error: 'M√©thode non autoris√©e' }),
      { 
        status: 405, 
        headers: { ...getCorsHeaders(origin), 'Content-Type': 'application/json' } 
      }
    );
  }

  try {
    // R√©cup√©rer les variables d'environnement
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('Configuration Supabase manquante');
    }

    // Cr√©er le client Supabase avec la cl√© service_role
    const supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    // V√©rifier l'authentification de l'utilisateur qui fait la requ√™te
    const authHeader = req.headers.get('Authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return new Response(
        JSON.stringify({ success: false, error: 'Token d\'authentification requis' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      );
    }

    const token = authHeader.replace('Bearer ', '');
    
    // V√©rifier que l'utilisateur est authentifi√© et est admin
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);
    
    if (authError || !user) {
      return new Response(
        JSON.stringify({ success: false, error: 'Token d\'authentification invalide' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // V√©rifier que l'utilisateur est admin
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('role')
      .eq('user_id', user.id)
      .single();

    if (profileError || !profile || profile.role !== 'admin') {
      return new Response(
        JSON.stringify({ success: false, error: 'Acc√®s refus√©. Seuls les administrateurs peuvent cr√©er des utilisateurs.' }),
        { status: 403, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // Parser les donn√©es de la requ√™te
    const userData: CreateUserRequest = await req.json();

    // Validation des donn√©es obligatoires
    if (!userData.email || !userData.password || !userData.full_name || !userData.role) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Donn√©es obligatoires manquantes: email, password, full_name, role' 
        }),
        { 
          status: 400, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Validation du r√¥le
    const validRoles = ['admin', 'owner', 'advertiser', 'tenant'];
    if (!validRoles.includes(userData.role)) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'R√¥le invalide. R√¥les autoris√©s: admin, owner, advertiser, tenant' 
        }),
        { 
          status: 400, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Validation de l'email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(userData.email)) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Format d\'email invalide' 
        }),
        { 
          status: 400, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Validation du mot de passe
    if (userData.password.length < 6) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Le mot de passe doit contenir au moins 6 caract√®res' 
        }),
        { 
          status: 400, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Cr√©er l'utilisateur avec l'API admin Supabase
    // Suivant exactement la documentation: https://supabase.com/docs/reference/javascript/auth-admin-createuser
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: userData.email,
      password: userData.password,
      email_confirm: true, // Auto-confirmer l'email
      user_metadata: {
        full_name: userData.full_name,
        role: userData.role,
        phone: userData.phone,
        bio: userData.bio,
        whatsapp_number: userData.whatsapp_number,
        website_url: userData.website_url,
        facebook_url: userData.facebook_url,
        instagram_url: userData.instagram_url,
        tiktok_url: userData.tiktok_url,
        messenger_url: userData.messenger_url,
        company_name: userData.company_name,
        company_website: userData.company_website,
        business_phone: userData.business_phone,
        business_email: userData.business_email,
        linkedin_url: userData.linkedin_url,
        twitter_url: userData.twitter_url
      }
    });

    if (authError) {
      console.error('Erreur lors de la cr√©ation de l\'utilisateur:', authError);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: `Erreur lors de la cr√©ation: ${authError.message}` 
        }),
        { 
          status: 400, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    if (!authUser.user) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Aucun utilisateur cr√©√©' 
        }),
        { 
          status: 500, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Le trigger handle_new_user() va automatiquement cr√©er le profil
    // V√©rifier que le profil a √©t√© cr√©√©
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', authUser.user.id)
      .single();

    if (profileError) {
      console.error('Erreur lors de la r√©cup√©ration du profil:', profileError);
      // L'utilisateur a √©t√© cr√©√© mais le profil n'a pas √©t√© cr√©√©
      // C'est un probl√®me mais l'utilisateur existe quand m√™me
    }

    // R√©ponse de succ√®s
    const response: CreateUserResponse = {
      success: true,
      user: {
        id: authUser.user.id,
        email: authUser.user.email,
        full_name: userData.full_name,
        role: userData.role,
        email_confirmed_at: authUser.user.email_confirmed_at,
        created_at: authUser.user.created_at,
        profile: profile
      }
    };

    return new Response(
      JSON.stringify(response),
      { 
        status: 201, 
        headers: { 
          ...getCorsHeaders(origin),
          'Content-Type': 'application/json'
        } 
      }
    );

  } catch (error) {
    console.error('Erreur dans create-user function:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: 'Erreur interne du serveur' 
      }),
      { 
        status: 500, 
        headers: { 'Content-Type': 'application/json' } 
      }
    );
  }
});
